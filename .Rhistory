kraken_price_raw <- system("cd Python/Kraken; python3 -c 'from kraken import get_kraken_price; get_kraken_price()'", intern = TRUE)
kraken_price_raw
runApp()
runApp()
kraken_price_raw <- system("cd Python/Kraken; python3 -c 'from kraken import get_kraken_price; get_kraken_price()'", intern = TRUE)
kraken_price <- reactiveValues(kraken_usd = strsplit(kraken_price_raw, ",")[1],
kraken_eur = strsplit(kraken_price_raw, ",")[2])
shiny::runApp()
kraken_price_raw <- system("cd Python/Kraken; python3 -c 'from kraken import get_kraken_price; get_kraken_price()'", intern = TRUE)
kraken_price_raw
kraken_usd = strsplit(kraken_price_raw, ",")[1]
kraken_usd
kraken_usd = strsplit(kraken_price_raw, ",")[[1]]
kraken_usd
kraken_price_raw <- system("cd Python/Kraken; python3 -c 'from kraken import get_kraken_price; get_kraken_price()'", intern = TRUE)
kraken_price <- reactiveValues(kraken_usd = strsplit(kraken_price_raw, ",")[[1]][1],
kraken_eur = strsplit(kraken_price_raw, ",")[[1]][2])
kraken_usd
kraken_eur
kraken_price$kraken_usd
kraken_usd <- strsplit(kraken_price_raw, ",")[[1]][1]
kraken_usd
kraken_usd <- strsplit(kraken_price_raw, ",")[[1]]
kraken_usd
runApp()
runApp()
?runapp
?runApp
kraken_price_raw <- system("cd Python/Kraken; python3 -c 'from kraken import get_kraken_price; get_kraken_price()'", intern = TRUE)
kraken_price <- reactiveValues(kraken_usd = strsplit(kraken_price_raw, ",")[[1]][1],
kraken_eur = strsplit(kraken_price_raw, ",")[[1]][2])
library(shiny)
kraken_price <- reactiveValues(kraken_usd = strsplit(kraken_price_raw, ",")[[1]][1],
kraken_eur = strsplit(kraken_price_raw, ",")[[1]][2])
mode(kraken_price)
kraken_price
kraken_price[,kraken_usd]
kraken_price[,"kraken_usd"]
head(kraken_price)
kraken_price_raw <- system("cd Python/Kraken; python3 -c 'from kraken import get_kraken_price; get_kraken_price()'", intern = TRUE)
kraken_price <- reactiveValues(kraken_usd = strsplit(kraken_price_raw, ",")[[1]][1],
kraken_eur = strsplit(kraken_price_raw, ",")[[1]][2])
kraken_price[1]
kraken_price[,1]
kraken_price[[1]]
kraken_price[["kraken_usd"]]
kraken_price$kraken_usd
runApp()
runApp()
runApp()
runApp()
runApp()
runApp(host = "0.0.0.0", port = "5050")
runApp(host = "0.0.0.0", port = 5050)
runApp()
runApp()
runApp(host = "0.0.0.0", port = 5050)
runApp(host = "0.0.0.0", port = 5050)
ui <- fluidPage(
#### Application title ####
titlePanel("Bit Tracker"),
sidebarLayout(
sidebarPanel(
selectInput("exchange",
"Exchange",
choices = c("Kraken")),
selectInput("currency",
"Currency",
choices = c("EUR", "USD")),
actionButton("go", "lel")
),
#### Main Panel ####
mainPanel(
textOutput("text")
)
)
)
runApp(host = "0.0.0.0", port = 5050)
runApp()
runApp()
library(shiny)
kraken_price_raw <- system("cd Python/Kraken; python3 -c 'from kraken import get_kraken_price; get_kraken_price()'", intern = TRUE)
bitcoin_price <- reactiveValues(kraken_usd = strsplit(kraken_price_raw, ",")[[1]][1],
kraken_eur = strsplit(kraken_price_raw, ",")[[1]][2])
###### SERVER ######
server <- function(input, output) {
# Timer to update kraken prices
kraken_timer <- reactiveTimer(10000)
# Observes timer go off and updates kraken Bitcoin prices
observeEvent(kraken_timer(),{
kraken_price_raw <- system("cd Python/Kraken; python3 -c 'from kraken import get_kraken_price; get_kraken_price()'", intern = TRUE)
bitcoin_price$kraken_usd <- strsplit(kraken_price_raw, ",")[[1]][1]
bitcoin_price$kraken_eur <- strsplit(kraken_price_raw, ",")[[1]][2]
print("Timer")
})
# Outputs price to UI
observeEvent(input$go,{
currency_price <- paste0(tolower(input$exchange),"_",tolower(input$currency))
output$text <- renderText(bitcoin_price[[currency_price]])
})
}
###### SERVER END ######
###### UI ######
ui <- fluidPage(
#### Application title ####
titlePanel("Bit Tracker"),
sidebarLayout(
sidebarPanel(
selectInput("exchange",
"Exchange",
choices = c("Kraken")),
selectInput("currency",
"Currency",
choices = c("EUR", "USD")),
actionButton("go", "lel")
),
#### Main Panel ####
mainPanel(
textOutput("text")
)
)
)
###### UI END ######
#shinyApp(ui = ui, server = server)
runApp(host = "0.0.0.0", port = 5050)
runApp
runApp()
runnApp()
runApp()
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
library(shiny)
##### Intitial Bitcoin Prices #####
kraken_price_raw <- system("cd Python/Kraken; python3 -c 'from kraken import get_kraken_price; get_kraken_price()'", intern = TRUE)
bitcoin_price <- reactiveValues(kraken_usd = strsplit(kraken_price_raw, ",")[[1]][1],
kraken_eur = strsplit(kraken_price_raw, ",")[[1]][2])
bitstamp_price_raw <- system("cd Python/Kraken; python3 -c 'from kraken import get_bitstamp_price; get_bitstamp_price()'", intern = TRUE)
bitcoin_price$bitstamp_usd <- strsplit(bitstamp_price_raw, ",")[[1]][1]
bitcoin_price$bitstamp_eur <- strsplit(bitstamp_price_raw, ",")[[1]][2]
###### SERVER ######
server <- function(input, output) {
# Timer to update kraken prices
kraken_timer <- reactiveTimer(10000)
# Observes timer go off and updates kraken and bitstamp Bitcoin prices
observeEvent(kraken_timer(),{
kraken_price_raw <- system("cd Python/Kraken; python3 -c 'from kraken import get_kraken_price; get_kraken_price()'", intern = TRUE)
bitcoin_price$kraken_usd <- strsplit(kraken_price_raw, ",")[[1]][1]
bitcoin_price$kraken_eur <- strsplit(kraken_price_raw, ",")[[1]][2]
bitstamp_price_raw <- system("cd Python/Kraken; python3 -c 'from kraken import get_bitstamp_price; get_bitstamp_price()'", intern = TRUE)
bitcoin_price$bitstamp_usd <- strsplit(bitstamp_price_raw, ",")[[1]][1]
bitcoin_price$bitstamp_eur <- strsplit(bitstamp_price_raw, ",")[[1]][2]
print("Timer")
})
# Outputs price to UI
observeEvent(input$go,{
currency_price <- paste0(tolower(input$exchange),"_",tolower(input$currency))
output$text <- renderText(bitcoin_price[[currency_price]])
})
}
###### SERVER END ######
###### UI ######
ui <- fluidPage(
#### Application title ####
titlePanel("Bit Tracker"),
sidebarLayout(
sidebarPanel(
selectInput("exchange",
"Exchange",
choices = c("Kraken", "Bitstamp")),
selectInput("currency",
"Currency",
choices = c("EUR", "USD")),
actionButton("go", "GO")
),
#### Main Panel ####
mainPanel(
textOutput("text")
)
)
)
###### UI END ######
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
